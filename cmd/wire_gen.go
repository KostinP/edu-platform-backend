// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/kostinp/edu-platform-backend/internal/user/repository"
	"github.com/kostinp/edu-platform-backend/internal/user/transport/http"
	"github.com/kostinp/edu-platform-backend/internal/user/usecase"
	"github.com/kostinp/edu-platform-backend/pkg/config"
	"github.com/kostinp/edu-platform-backend/pkg/db"
	"github.com/labstack/echo/v4"
)

// Injectors from wire.go:

func InitializeServer(cfg *config.Config) (*echo.Echo, error) {
	pool := db.ConnectPostgres(cfg)
	postgresUserRepository := repository.NewPostgresUserRepository(pool)
	postgresSessionRepository := repository.NewPostgresSessionRepository(pool)
	sessionUsecaseImpl := usecase.NewSessionUsecase(postgresSessionRepository)
	userService := usecase.NewUserService(postgresUserRepository, sessionUsecaseImpl)
	userHandler := transport.NewUserHandler(userService)
	postgresVisitorEventRepo := repository.NewPostgresVisitorEventRepo(pool)
	visitorEventUsecase := usecase.NewVisitorEventUsecase(postgresVisitorEventRepo)
	visitorEventHandler := transport.NewVisitorEventHandler(visitorEventUsecase)
	botToken := provideBotToken(cfg)
	jwtSecret := provideJwtSecret(cfg)
	telegramAuthHandler := transport.NewTelegramAuthHandler(userService, botToken, jwtSecret)
	sessionHandler := transport.NewSessionHandler(sessionUsecaseImpl)
	echoEcho, err := newEchoServer(cfg, userHandler, visitorEventHandler, telegramAuthHandler, sessionHandler, sessionUsecaseImpl, userService)
	if err != nil {
		return nil, err
	}
	return echoEcho, nil
}

func InitializeSessionUsecase(cfg *config.Config) (usecase.SessionUsecase, error) {
	pool := db.ConnectPostgres(cfg)
	postgresSessionRepository := repository.NewPostgresSessionRepository(pool)
	sessionUsecaseImpl := usecase.NewSessionUsecase(postgresSessionRepository)
	return sessionUsecaseImpl, nil
}

// wire.go:

// Обёртки для строковых типов
func provideBotToken(cfg *config.Config) config.BotToken {
	return config.BotToken(cfg.Telegram.Token)
}

func provideJwtSecret(cfg *config.Config) config.JwtSecret {
	return config.JwtSecret(cfg.JWT.Secret)
}
